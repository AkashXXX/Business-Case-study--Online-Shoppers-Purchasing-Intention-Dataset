# -*- coding: utf-8 -*-
"""Dattansh- Case study

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6OgNik32K2rS3IByvLvRxk-5PFqGRlK
"""

# prompt: upload csv file as dataframe

import pandas as pd
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

df = pd.read_csv(fn)
print(df.head())

df

df.isnull().sum()

df.info()

# prompt: count duplicated and then remove it

# Count duplicates
duplicates = df.duplicated().sum()
print(f"\nNumber of duplicate rows: {duplicates}")

# Remove duplicates
df = df.drop_duplicates()
duplicates = df.duplicated().sum()
print(f"\nNumber of duplicate rows: {duplicates}")

"""special day column values by 0 and 1 based on it's current values <0.5 then 0 else 1"""

# prompt: replace special day column values by 0 and 1 based on it's current values <0.5 then 0 else 1

# Assuming 'SpecialDay' is the column name you want to modify
df['SpecialDay'] = df['SpecialDay'].apply(lambda x: 0 if x < 0.5 else 1)
df

numerical_cols = ['Administrative','Administrative_Duration','Informational','Informational_Duration','ProductRelated','ProductRelated_Duration','BounceRates','ExitRates','PageValues']
categorical_cols = df.columns.difference(numerical_cols)

print("Numerical columns:")
print(numerical_cols)

print("\nCategorical columns:")
categorical_cols

"""## Numerical Column Analysis

### 1. Univariate
"""

df.describe()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame and numerical_cols is defined as in your previous code
numerical_cols = ['Administrative','Administrative_Duration','Informational','Informational_Duration','ProductRelated','ProductRelated_Duration','BounceRates','ExitRates','PageValues']

# Create subplots for each numerical column
num_cols = len(numerical_cols)
num_rows = (num_cols + 2) // 3  # Calculate the number of rows needed for subplots
plt.figure(figsize=(15, 5 * num_rows))

for i, col in enumerate(numerical_cols):
    plt.subplot(num_rows, 3, i + 1)
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

"""Numerical Summary:
1. Most users visit fewer administrative and informational pages compared to product-related pages.
2. Median durations for administrative, informational, and product-related pages indicate low engagement on average.
3. High variability in ProductRelated_Duration suggests distinct user behaviors (some spend considerable time, others very little).
4. *Bounce rates and exit rates have low medians, but their maximum values show potential issues in user retention.

### 2. Bivariate
"""

# prompt: plot heatmap for correlation

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame and numerical_cols is defined
plt.figure(figsize=(10, 8))
sns.heatmap(df[numerical_cols+ ['Revenue']].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numerical Features')
plt.show()

"""1. PageValues is comparatively better correlated with Revenue.
2. BounceRates and ExitRates show a negative correlation with Revenue, suggesting that reducing these could positively influence conversions.
"""

sns.scatterplot(x='PageValues', y='Revenue', data=df, alpha=0.5)
plt.title("PageValues vs Revenue")
plt.xlabel("PageValues")
plt.ylabel("Revenue")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

palette = {1: "skyblue", 0: "lightcoral"}
for col in numerical_cols:
    plt.figure(figsize=(10, 6))  # Adjusting the figure size for better readability
    sns.histplot(df[df['Revenue'] == 1][col], label="Revenue = 1", color=palette[1], fill=True, kde=True, stat="density")
    sns.histplot(df[df['Revenue'] == 0][col], label="Revenue = 0", color=palette[0], fill=True, kde=True, stat="density")

    # Customizing the title and labels
    plt.title(f"Distribution of {col} by Revenue", fontsize=16, weight='bold')
    plt.xlabel(f"{col} Values", fontsize=12)
    plt.ylabel("Density", fontsize=12)

    # Adding the legend with better positioning
    plt.legend(title="Revenue Status", loc='upper right', fontsize=12)

    # Show grid for easier visual interpretation
    plt.grid(True, linestyle='--', alpha=0.6)

    # Display the plot
    plt.tight_layout()  # Ensures everything fits in the figure
    plt.show()

median_values = df.groupby('Revenue')[numerical_cols].median()
median_values

"""## Categorical Analysis

## 1. Univariate
"""

# prompt: plot pie chart for all categorical columns

# Assuming 'df' is your DataFrame and categorical_cols is defined as in your previous code
# categorical_cols = df.columns.difference(numerical_cols)

# Create subplots for each categorical column
num_cols = len(categorical_cols)
num_rows = (num_cols + 2) // 3  # Calculate the number of rows needed for subplots
plt.figure(figsize=(15, 5 * num_rows))

for i, col in enumerate(categorical_cols):
    plt.subplot(num_rows, 3, i + 1)
    df[col].value_counts().plot(kind='pie', autopct='%1.1f%%')
    plt.title(f'Distribution of {col}')
    plt.ylabel('')  # Hide the y-axis label

plt.tight_layout()
plt.show()

"""* Around 15% of sessions bring revenue.
* Around 15% are nev_visitors

### 2. Bivariate
"""

# prompt: plot cross tab betveen specialday and revenue, both binary variable

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create the cross-tabulation
crosstab = pd.crosstab(df['SpecialDay'], df['Revenue'])

# Plot the cross-tabulation
plt.figure(figsize=(8, 6))
sns.heatmap(crosstab, annot=True, fmt='d', cmap='Blues', cbar=True)
plt.title('Cross-Tabulation of SpecialDay and Revenue')
plt.xlabel('Revenue')
plt.ylabel('SpecialDay')
plt.show()

# prompt: plot cross tab betveen specialday and revenue, both binary variable

crosstab = pd.crosstab(df['Weekend'], df['Revenue'])

# Plot the cross-tabulation
plt.figure(figsize=(8, 6))
sns.heatmap(crosstab, annot=True, fmt='d', cmap='Blues', cbar=True)
plt.title('Cross-Tabulation of Weekend and Revenue')
plt.xlabel('Revenue')
plt.ylabel('Weekend')
plt.show()

# prompt: plot cross tab betveen specialday and revenue, both binary variable

crosstab = pd.crosstab(df['VisitorType'], df['Revenue'])

# Plot the cross-tabulation
plt.figure(figsize=(8, 6))
sns.heatmap(crosstab, annot=True, fmt='d', cmap='Blues', cbar=True)
plt.title('Cross-Tabulation of VisitorType and Revenue')
plt.xlabel('Revenue')
plt.ylabel('VisitorType')
plt.show()

# prompt: can you give above cross tabulation values in percentage values for each rovs and also column vise. keep side by side but vith some space betveen both plots

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Function to create percentage-based cross-tabulations
def plot_percentage_crosstab(crosstab, title):
    # Calculate row percentages
    row_percentages = crosstab.div(crosstab.sum(axis=1), axis=0) * 100

    # Calculate column percentages
    col_percentages = crosstab.div(crosstab.sum(axis=0), axis=1) * 100

    # Create subplots side by side
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))  # Increased figure width for better spacing
    fig.suptitle(title, fontsize=16)


    sns.heatmap(row_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[0], cbar_kws={'label': 'Row Percentage (%)'})
    axes[0].set_title("Row Percentages")
    axes[0].set_ylabel(f"{crosstab.axes[0].name}")
    axes[0].set_xlabel("Revenue")

    sns.heatmap(col_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[1], cbar_kws={'label': 'Column Percentage (%)'})
    axes[1].set_title("Column Percentages")
    axes[1].set_ylabel(f"{crosstab.axes[0].name}")
    axes[1].set_xlabel("Revenue")

    plt.tight_layout(rect=[0, 0, 1, 0.95]) # Adjust layout to prevent title overlap
    plt.show()


# Example usage with the 'VisitorType' and 'Revenue' columns
crosstab_visitor_revenue = pd.crosstab(df['VisitorType'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of VisitorType and Revenue (Percentage)')

# Example usage with other categorical columns and 'Revenue' (replace 'Weekend', 'SpecialDay' as needed)
crosstab_weekend_revenue = pd.crosstab(df['Weekend'], df['Revenue'])
plot_percentage_crosstab(crosstab_weekend_revenue, 'Cross-Tabulation of Weekend and Revenue (Percentage)')

crosstab_specialday_revenue = pd.crosstab(df['SpecialDay'], df['Revenue'])
plot_percentage_crosstab(crosstab_specialday_revenue, 'Cross-Tabulation of SpecialDay and Revenue (Percentage)')

"""1. *customer repeat purchase rate is low(15%), a good repeat purchase rate is between 20-40%.
2. No difference for special days or weekends.
"""

# prompt: plot simpl line chart across month and count of visitor type vith nev and existing visitor differently. keep month in order in plot axis.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataframe is named 'df' and already loaded
# ... (your existing code to load and preprocess the data) ...

# Convert 'Month' to categorical with specific order
month_order = ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)

# Group data by month and visitor type, then count
visitor_counts = df.groupby(['Month', 'VisitorType'])['Revenue'].count().reset_index()

# Create the line plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Month', y='Revenue', hue='VisitorType', data=visitor_counts, marker='o')
plt.title('Visitor Type Counts Across Months')
plt.xlabel('Month')
plt.ylabel('Count of Visitor Type')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend(title='Visitor Type')
plt.grid(True, linestyle='--', alpha=0.7) # Add a subtle grid
plt.tight_layout()
plt.show()

# prompt: plot simpl line chart across month and count of visitor type vith nev and existing visitor differently. keep month in order in plot axis.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataframe is named 'df' and already loaded
# ... (your existing code to load and preprocess the data) ...

# Convert 'Month' to categorical with specific order
# month_order = ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
# df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)

# Group data by month and visitor type, then count
visitor_counts = df[df['Month']=='May'].groupby(['Region', 'VisitorType'])['Revenue'].count().reset_index()

# Create the line plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Region', y='Revenue', hue='VisitorType', data=visitor_counts, marker='o')
plt.title('Visitor Type Counts in May')
plt.xlabel('May')
plt.ylabel('Count of Visitor Type')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend(title='Visitor Type')
plt.grid(True, linestyle='--', alpha=0.7) # Add a subtle grid
plt.tight_layout()
plt.show()



"""seasonal trend: product preferred keep their stock ready. give promotional offers, develop marketing strategies."""

df.groupby(['Month', 'VisitorType'])['Revenue'].count()

# prompt: analyse the percentage of revenue is true out of total revenue count variation across month for each type of visitor. remove other visitor type and keep month in order in the plot

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame and it's already loaded and preprocessed

# Filter out 'Other' visitor types
df_filtered = df[df['VisitorType'] != 'Other']

# Convert 'Month' to ordered categorical type
month_order = ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_filtered['Month'] = pd.Categorical(df_filtered['Month'], categories=month_order, ordered=True)

# Group data and calculate the percentage of revenue for each month and visitor type
revenue_percentage = df_filtered.groupby(['Month', 'VisitorType'])['Revenue'].agg(lambda x: (x.sum() / len(x)) * 100)
revenue_percentage = revenue_percentage.reset_index(name='Revenue Percentage')

# Create the plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Month', y='Revenue Percentage', hue='VisitorType', data=revenue_percentage, marker='o')
plt.title('Percentage of Revenue (True) Variation Across Months for Each Visitor Type')
plt.xlabel('Month')
plt.ylabel('Revenue Percentage')
plt.xticks(rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""vhat happened in dec?
for nev visitors, conversion rate is almost constant but traffic spiked in Nov and May, vhivh shovs that still large prospect consumer are not being served, they should analyse vhat product is in demand during peak months, keep stock, devleop marketing strategies and give promotional offers on them.
"""

# prompt: filter df for bounce rate 0.2 and exit rate 0.2 separately and shov univariate analysis for numerical columns and catg columns. plot side by side as subplot

# Filter for bounce rate 0.2
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_dec = df[df['Month'] == 'Dec']

# Function for univariate analysis and plotting
def univariate_analysis(df, title):
    numerical_cols = ['Administrative','Administrative_Duration','Informational','Informational_Duration','ProductRelated','ProductRelated_Duration','BounceRates','ExitRates','PageValues']
    categorical_cols = df.columns.difference(numerical_cols)

    num_rows = (len(numerical_cols) + 2) // 3
    plt.figure(figsize=(15, 5*num_rows))
    plt.suptitle(title, fontsize=16)

    for i, col in enumerate(numerical_cols):
      plt.subplot(num_rows, 3, i+1)
      sns.histplot(df[col], kde=True)
      plt.title(f'Distribution of {col}')

    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()


    num_rows = (len(categorical_cols) + 2) // 3
    plt.figure(figsize=(15, 5*num_rows))
    plt.suptitle(title, fontsize=16)

    for i, col in enumerate(categorical_cols):
      plt.subplot(num_rows, 3, i+1)
      df[col].value_counts().plot(kind='bar')
      plt.title(f'Distribution of {col}')

    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()


# Univariate analysis for bounce rate 0.2
univariate_analysis(df_dec, "Univariate Analysis for dec month")

# prompt: calculate the same thing as above i.e percentage true revenue for each type of visitor excluding other visitor type but in place of month, it should be variation of  regions, special day, weekends, traffic type separately.

# Assuming 'df' is your DataFrame and it's already loaded and preprocessed

def plot_revenue_percentage(df, column_name):
    """
    Calculates and plots the percentage of true revenue for each visitor type,
    excluding 'Other', across different categories (regions, special days, etc.).
    """

    df_filtered = df[df['VisitorType'] != 'Other']

    # Group data and calculate revenue percentage
    revenue_percentage = df_filtered.groupby([column_name, 'VisitorType'])['Revenue'].agg(lambda x: (x.sum() / len(x)) * 100)
    revenue_percentage = revenue_percentage.reset_index(name='Revenue Percentage')

    # Create the plot
    plt.figure(figsize=(12, 6))
    sns.lineplot(x=column_name, y='Revenue Percentage', hue='VisitorType', data=revenue_percentage, marker='o')
    plt.title(f'Percentage of Revenue (True) Variation by {column_name.replace("_", " ").title()} for Each Visitor Type')
    plt.xlabel(column_name.replace("_", " ").title())
    plt.ylabel('Revenue Percentage')
    plt.xticks(rotation=45)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

# Example usage for different columns
plot_revenue_percentage(df, 'Region')         # Replace 'Region' with the actual column name
plot_revenue_percentage(df, 'SpecialDay')     # assuming SpecialDay is binary (0 or 1)
plot_revenue_percentage(df, 'Weekend')
plot_revenue_percentage(df, 'TrafficType')

# prompt: plot simpl line chart across month and count of visitor type vith nev and existing visitor differently. keep month in order in plot axis.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataframe is named 'df' and already loaded
# ... (your existing code to load and preprocess the data) ...

# Convert 'Month' to categorical with specific order
# month_order = ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
# df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)

# Group data by month and visitor type, then count
visitor_counts = df.groupby(['Region', 'VisitorType'])['Revenue'].count().reset_index()

# Create the line plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Region', y='Revenue', hue='VisitorType', data=visitor_counts, marker='o')
plt.title('Visitor Type Counts across Region')
plt.xlabel('Region')
plt.ylabel('Count of Traffic Type')
# Convert x-axis labels to integers if possible
try:
  plt.xticks(range(int(min(visitor_counts['Region'])), int(max(visitor_counts['Region'])) + 1))
except ValueError:
  pass # Keep original labels if conversion to integer fails

plt.xticks(rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# prompt: in above plot of variation based on traffic type, correct the x axis labels to integer

# Assuming 'df' is your DataFrame and it's already loaded and preprocessed

def plot_revenue_percentage(df, column_name):
    """
    Calculates and plots the percentage of true revenue for each visitor type,
    excluding 'Other', across different categories (regions, special days, etc.).
    """

    df_filtered = df[df['VisitorType'] != 'Other']

    # Group data and calculate revenue percentage
    revenue_percentage = df_filtered.groupby([column_name, 'VisitorType'])['Revenue'].agg(lambda x: (x.sum() / len(x)) * 100)
    revenue_percentage = revenue_percentage.reset_index(name='Revenue Percentage')

    # Create the plot
    plt.figure(figsize=(12, 6))
    sns.lineplot(x=column_name, y='Revenue Percentage', hue='VisitorType', data=revenue_percentage, marker='o')
    plt.title(f'Percentage of Revenue (True) Variation by {column_name.replace("_", " ").title()} for Each Visitor Type')
    plt.xlabel(column_name.replace("_", " ").title())
    plt.ylabel('Revenue Percentage')

    # Convert x-axis labels to integers if possible
    try:
        plt.xticks(range(int(min(revenue_percentage[column_name])), int(max(revenue_percentage[column_name])) + 1))
    except ValueError:
        pass # Keep original labels if conversion to integer fails

    plt.xticks(rotation=45)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

# # Example usage for different columns
# plot_revenue_percentage(df, 'Region')         # Replace 'Region' with the actual column name
# plot_revenue_percentage(df, 'SpecialDay')     # assuming SpecialDay is binary (0 or 1)
# plot_revenue_percentage(df, 'Weekend')
plot_revenue_percentage(df, 'TrafficType')

# prompt: plot simpl line chart across month and count of visitor type vith nev and existing visitor differently. keep month in order in plot axis.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your dataframe is named 'df' and already loaded
# ... (your existing code to load and preprocess the data) ...

# Convert 'Month' to categorical with specific order
# month_order = ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
# df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)

# Group data by month and visitor type, then count
visitor_counts = df.groupby(['TrafficType', 'VisitorType'])['Revenue'].count().reset_index()

# Create the line plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='TrafficType', y='Revenue', hue='VisitorType', data=visitor_counts, marker='o')
plt.title('Visitor Type Counts by Traffic Type')
plt.xlabel('Traffic Type')
plt.ylabel('Count of Traffic Type')
# Convert x-axis labels to integers if possible
try:
  plt.xticks(range(int(min(visitor_counts['TrafficType'])), int(max(visitor_counts['TrafficType'])) + 1))
except ValueError:
  pass # Keep original labels if conversion to integer fails

plt.xticks(rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""for nev visitor, best conversion recived by traffic 4 then 2. As 1,2,3,4 are the ones brings major traffic."""

# prompt: can you give above cross tabulation values in percentage values for each rovs and also column vise. keep side by side but vith some space betveen both plots

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Function to create percentage-based cross-tabulations
def plot_percentage_crosstab(crosstab, title):
    # Calculate row percentages
    row_percentages = crosstab.div(crosstab.sum(axis=1), axis=0) * 100

    # Calculate column percentages
    col_percentages = crosstab.div(crosstab.sum(axis=0), axis=1) * 100

    # Create subplots side by side
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))  # Increased figure width for better spacing
    fig.suptitle(title, fontsize=16)


    sns.heatmap(row_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[0], cbar_kws={'label': 'Row Percentage (%)'})
    axes[0].set_title("Row Percentages")
    axes[0].set_ylabel(f"{crosstab.axes[0].name}")
    axes[0].set_xlabel("Revenue")

    sns.heatmap(col_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[1], cbar_kws={'label': 'Column Percentage (%)'})
    axes[1].set_title("Column Percentages")
    axes[1].set_ylabel(f"{crosstab.axes[0].name}")
    axes[1].set_xlabel("Revenue")

    plt.tight_layout(rect=[0, 0, 1, 0.95]) # Adjust layout to prevent title overlap
    plt.show()


# Example usage with the 'Month' and 'Revenue' columns
crosstab_visitor_revenue = pd.crosstab(df['Month'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of Month and Revenue (Percentage)')

crosstab_visitor_revenue = pd.crosstab(df['Region'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of Region and Revenue (Percentage)')

"""1. Majority traffic come in the order of May, Nov, Mar, Dec and among that Max Conversion seen in order of Nov, Dec, May, Mar months. Nov is best overall.
2. Same 15% conversion across region.
"""

# prompt: can you give above cross tabulation values in percentage values for each rovs and also column vise. keep side by side but vith some space betveen both plots

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Function to create percentage-based cross-tabulations
def plot_percentage_crosstab(crosstab, title):
    # Calculate row percentages
    row_percentages = crosstab.div(crosstab.sum(axis=1), axis=0) * 100

    # Calculate column percentages
    col_percentages = crosstab.div(crosstab.sum(axis=0), axis=1) * 100

    # Create subplots side by side
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))  # Increased figure width for better spacing
    fig.suptitle(title, fontsize=16)


    sns.heatmap(row_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[0], cbar_kws={'label': 'Row Percentage (%)'})
    axes[0].set_title("Row Percentages")
    axes[0].set_ylabel(f"{crosstab.axes[0].name}")
    axes[0].set_xlabel("Revenue")

    sns.heatmap(col_percentages, annot=True, fmt=".1f", cmap='Blues', ax=axes[1], cbar_kws={'label': 'Column Percentage (%)'})
    axes[1].set_title("Column Percentages")
    axes[1].set_ylabel(f"{crosstab.axes[0].name}")
    axes[1].set_xlabel("Revenue")

    plt.tight_layout(rect=[0, 0, 1, 0.95]) # Adjust layout to prevent title overlap
    plt.show()


# Example usage with the 'Bro' and 'Revenue' columns
crosstab_visitor_revenue = pd.crosstab(df['Browser'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of Browser and Revenue (Percentage)')

crosstab_visitor_revenue = pd.crosstab(df['OperatingSystems'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of OperatingSystems and Revenue (Percentage)')

crosstab_visitor_revenue = pd.crosstab(df['TrafficType'], df['Revenue'])
plot_percentage_crosstab(crosstab_visitor_revenue, 'Cross-Tabulation of TrafficType and Revenue (Percentage)')

"""1. Major traffic brings by Traffic type in order of 1,2,3,4 but conversion rate is in order of 2,4,1,3. Traffic type 2 is best overall.

Overall, Revenue is varying across type of visitor, month, and traffic type.

other variables are Weekends, SpecialDay, Region

Check:
1. Hov customer repetition rate is varying across month, regions, special day, weekends, traffic type.
2. Explore bounce rate and exit rate max value of 0.2 sessions.
"""

# prompt: filter df for bounce rate 0.2 and exit rate 0.2 separately and shov univariate analysis for numerical columns and catg columns. plot side by side as subplot

# Filter for bounce rate 0.2
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_bounce = df[df['BounceRates'] >= 0.2]

# Filter for exit rate 0.2
df_exit = df[df['ExitRates'] >= 0.2]

# Function for univariate analysis and plotting
def univariate_analysis(df, title):
    numerical_cols = ['Administrative','Administrative_Duration','Informational','Informational_Duration','ProductRelated','ProductRelated_Duration','BounceRates','ExitRates','PageValues']
    categorical_cols = df.columns.difference(numerical_cols)

    num_rows = (len(numerical_cols) + 2) // 3
    plt.figure(figsize=(15, 5*num_rows))
    plt.suptitle(title, fontsize=16)

    for i, col in enumerate(numerical_cols):
      plt.subplot(num_rows, 3, i+1)
      sns.histplot(df[col], kde=True)
      plt.title(f'Distribution of {col}')

    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()


    num_rows = (len(categorical_cols) + 2) // 3
    plt.figure(figsize=(15, 5*num_rows))
    plt.suptitle(title, fontsize=16)

    for i, col in enumerate(categorical_cols):
      plt.subplot(num_rows, 3, i+1)
      df[col].value_counts().plot(kind='bar')
      plt.title(f'Distribution of {col}')

    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()


# Univariate analysis for bounce rate 0.2
univariate_analysis(df_bounce, "Univariate Analysis for Bounce Rate >= 0.2")

# Univariate analysis for exit rate 0.2
univariate_analysis(df_exit, "Univariate Analysis for Exit Rate >= 0.2")

df_bounce.describe()

df_bounce